@page "/definitions"

@using FaberController.Services
@using FaberController.Shared.Components.ComponentNav
@using FaberController.Shared.Components.ObjectViewer
@using Newtonsoft.Json.Linq

@inject FCAgentService AgentService

<ComponentNav></ComponentNav>

<div class="content">
    <div class="container">
        <select class="custom-select custom-select-lg mb-3" @onchange="OnSelectCredentialDefinition">
            <option selected disabled value="">Select a CredentialDefinition</option>
            @foreach (var CredentialDefinitionId in CredentialDefinitionIds)
            {
                <option value="@CredentialDefinitionId">@CredentialDefinitionId</option>

            }
        </select>

        @if ((SelectedCredentialDefinitionObject != null) && (SelectedCredentialDefinitionObject != ""))
        {
            <div class="row">
                <div class="col-12">
                    <ObjectViewer Id="selectedCredentialDefinitionObject" Label="Credential Definition:" ObjectString="@SelectedCredentialDefinitionObject"></ObjectViewer>
                </div>
            </div>
        }
    </div>
    <div style="text-align: center;">
    <br>
    <p>Click belo to create credential Definition</p>
    <button class="btn btn-primary" @onclick="OnSubmitCredDef">Submit</button>
    <br>

</div>
</div>

@code {

    public async Task OnSubmitCredDef()
{
    try
    {

    //Dictionary<string, string> schema_body = new Dictionary<string, string>();
        
         var response = await AgentService.SetCredDef(); 

        @* if (response != null && response.HasValues)
        {
            ResponseObject = response["akshita"].ToString();
        } *@
    }
    catch (Exception ex)
    {
        // Handle the exception appropriately (e.g., logging or displaying an error message).
        Console.Error.WriteLine(ex);
    }

    // If this code is within a component, you can use StateHasChanged to update the UI.
    StateHasChanged();
}

    public JArray CredentialDefinitionIds = new JArray();
    public string SelectedCredentialDefinitionObject { get; set; }

    protected async override Task OnInitializedAsync()
    {
        CredentialDefinitionIds = await AgentService.GetCredentialDefinitions();
    }

    public async void OnSelectCredentialDefinition(ChangeEventArgs e)
    {
        JObject SelectedCredentialDefinition = await AgentService.GetCredentialDefinition(e.Value.ToString());
        SelectedCredentialDefinitionObject = SelectedCredentialDefinition.ToString();
        base.StateHasChanged();
    }
}
