@page "/schemas"

@using FaberController.Services
@using FaberController.Shared.Components.ComponentNav
@using FaberController.Shared.Components.ObjectViewer
@using Newtonsoft.Json.Linq
@inject FCAgentService AgentService
@inject IJSRuntime JSRuntime

<ComponentNav></ComponentNav>

<div class="content">
    <div class="container">
        <select class="custom-select custom-select-lg mb-3" @onchange="OnSelectSchema">
            <option selected disabled value="">Select a Schema</option>
            @foreach (var SchemaId in SchemaIds)
            {
                <option value="@SchemaId">@SchemaId</option>
            }
        </select>
        <div>
            
        </div>

        @if ((SelectedSchemaObject != null) && (SelectedSchemaObject != ""))
        {
            <div class="row">
                <div class="col-12">
                    <ObjectViewer Id="selectedSchemaObject" Label="Schema:" ObjectString="@SelectedSchemaObject"></ObjectViewer>
                </div>
            </div>
        }
    </div>
    <div style="text-align: center;">
    <button class="btn btn-primary" @onclick="ToggleInputBoxes">Create custom schema</button>
    </div>
</div>
@if (showInputBoxes)
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" @bind="Name" />
            </div>
            <div class="col">
                <label for="schemaName">Schema Name:</label>
                <input type="text" class="form-control" id="schemaName" @bind="SchemaName" />
            </div>
            <div class="col">
                <label for="degree">Degree:</label>
                <input type="text" class="form-control" id="degree" @bind="Degree" />
            </div>
            <div class="col">
                <label for="extraField">University:</label>
                <input type="text" class="form-control" id="extraField" @bind="ExtraField" />
            </div>
        </div>
    </div>

}
<div style="text-align: center;">
    <br>
    <button class="btn btn-primary" @onclick="OnSubmitCustomSchema">Submit</button>
    <br>
    @* @if (showSuccessMessage)
    {
        <p>Your inputs were successfully saved!</p>
    } *@
</div>

@code {
      private bool showInputBoxes = false;
    private string Name;
    private string SchemaName;
    private string Degree;
    private string ExtraField;
     private bool showSuccessMessage = false;

    public string ResponseObject { get; set; }

public async Task OnSubmitCustomSchema()
{
    try
    {

    //Dictionary<string, string> schema_body = new Dictionary<string, string>();
        
         var response = await AgentService.SetCustomSchema(); 

        @* if (response != null && response.HasValues)
        {
            ResponseObject = response["akshita"].ToString();
        } *@
    }
    catch (Exception ex)
    {
        // Handle the exception appropriately (e.g., logging or displaying an error message).
        Console.Error.WriteLine(ex);
    }

    // If this code is within a component, you can use StateHasChanged to update the UI.
    StateHasChanged();
}

    public async Task ToggleInputBoxes()
    {
        showInputBoxes = !showInputBoxes;
        if (showInputBoxes)
        {
            Name = string.Empty;
            SchemaName = string.Empty;
            Degree = string.Empty;
            ExtraField = string.Empty;
        }
    }
    public JArray SchemaIds = new JArray();
    public string SelectedSchemaObject { get; set; }

    protected async override Task OnInitializedAsync()
    {
        SchemaIds = await AgentService.GetSchemas();
    }

    public async void OnSelectSchema(ChangeEventArgs e)
    {
        JObject SelectedSchema = await AgentService.GetSchema(e.Value.ToString());
        SelectedSchemaObject = SelectedSchema.ToString();
        base.StateHasChanged();
    }
}
